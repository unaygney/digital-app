// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  starter
  basic
  pro
}

enum PaymentStatus {
  pending
  paid
}

enum SenderType {
  USER
  AI
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  firstName           String?
  lastName            String?
  userName            String?               @unique
  jobTitle            String?
  workPlace           String?
  pronouns            String?
  country             String?
  city                String?
  profileImage        String?
  images              Image[]
  preferences         Json?                 @default("{}")
  billingInformation  BillingInformation?
  subscription        Subscription?
  subscriptionHistory SubscriptionHistory[]
  chats               Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillingInformation {
  id       Int     @id @default(autoincrement())
  userId   String  @unique
  email    String
  country  String
  address  String
  address2 String?
  city     String
  state    String
  zip      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Image {
  id          Int     @id @default(autoincrement())
  name        String?
  originalUrl String  @unique
  cropX       Int?
  cropY       Int?
  cropWidth   Int?
  cropHeight  Int?
  userId      String?
  width       Int
  height      Int
  size        Float?
  user        User?   @relation(fields: [userId], references: [id])
}

model Subscription {
  id           Int           @id @default(autoincrement())
  userId       String        @unique
  planType     PlanType      @default(starter)
  previousPlan PlanType?     @default(starter)
  pricing      Float         @default(0)
  status       PaymentStatus @default(pending)
  paymentId    String?       @unique
  customerId   String?       @unique
  expiryDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model SubscriptionHistory {
  id           Int           @id @default(autoincrement())
  userId       String
  invoiceStart DateTime
  invoiceEnd   DateTime
  status       PaymentStatus @default(pending)
  amount       Float
  planType     PlanType
  downloadLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  userId    String?
  title     String?
  sessionId String?
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model Message {
  id        Int        @id @default(autoincrement())
  chatId    String
  sender    SenderType
  content   String
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt

  chat Chat @relation(fields: [chatId], references: [id])
}
